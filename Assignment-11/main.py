# -*- coding: utf-8 -*-
"""main.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-WAa9a0vYXoogbfpQtBLlZZHKMBy_n28
"""

!git clone https://github.com/Himank-J/ERAV2_Master.git

# Commented out IPython magic to ensure Python compatibility.
# %cd ERAV2_Master

import sys
sys.path.append(".")

import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim

from models.model_S11 import ResNet18
from utility.utils_S11 import LoadDataset, VisualizeData, LearningRateFinder, TrainTest

dataloader = LoadDataset()
dataviz = VisualizeData()
lrf = LearningRateFinder()
traintest = TrainTest()

train_loader,test_loader = dataloader.getData(512)

dataviz.visualize(train_loader)

from torchsummary import summary
use_cuda = torch.cuda.is_available()
device = torch.device("cuda" if use_cuda else "cpu")
model = ResNet18().to(device)
summary(model, input_size=(3, 32, 32))

lrf.findLR(model,train_loader)

lrf.visualizeLR()

from torch.optim.lr_scheduler import OneCycleLR

model = ResNet18().to(device)
optimizer = optim.Adam(model.parameters())
criterion = nn.CrossEntropyLoss()

EPOCHS = 20

scheduler = OneCycleLR(
    optimizer,
    max_lr=1.83E-01,
    steps_per_epoch=len(train_loader),
    epochs=EPOCHS,
    pct_start=5 / EPOCHS,
    div_factor=100,
    three_phase=False,
    final_div_factor=100,
    anneal_strategy="linear",
)

for epoch in range(EPOCHS):
    print("EPOCH:", epoch)
    train_acc, train_losses = traintest.train(model, device, train_loader, optimizer, criterion)
    scheduler.step()
    test_acc,test_losses = traintest.test(model, device, test_loader, criterion)

traintest.visualizeLoss(train_losses,train_acc,test_losses,test_acc)

import torch.backends.cudnn as cudnn
from utility.utils_S11 import getMisclassifiedImages, plot_misclassification, getGradCamImages

net = ResNet18()
net = net.to(device)
if device == "cuda":
    net = torch.nn.DataParallel(net)
    cudnn.benchmark = True

misclassified = getMisclassifiedImages(net, device, test_loader)

plot_sample = 20
shortlisted_misclf_images = plot_misclassification(misclassified, plot_sample_count=plot_sample)

getGradCamImages(net,shortlisted_misclf_images,plot_sample)